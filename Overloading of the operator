#1


#Overloading the addition operator
#class with add method
class Adder:
    #constructor
    def __init__(self, number):
        self.number = number

    #method for maling strings
    def __str__(self):
        #creating the text
        txt="The value of the field number is = "
        txt+=str(self.number)
        return txt
    #description the adding method
    def __add__(self,x):
        #calculate the value
        number=self.number+x
        #create sprcimen
        tmp=Adder(number)
        return tmp
a=Adder(10)
b=a+5
print(a)
print(b)



#2


#overload of the operators
#loading function for calculation the roots
from math import sqrt
#class
class Vector():
    #constructor
    def __init__(self, x=0,y=0, z=0):
        self.x= x
        self .y=y
        self.z = z
    #method for making strings
    def __str__(self):
        #text value
        txt="<" + str (self.x) +"|"
        txt+=str (self.y) +"|"
        txt+=str(self.z)+">"
        #the result
        return txt
    #adding vectors
    def __add__(self,obj):
        #create class specimen
        t=Vector()
        #values of the field of specimen
        t.x= self.x + obj.x
        t.y= self.y + obj.y
        t.z= self.z + obj.z
        #the result of the method
        return t
    #adding vectores with
    def __iadd__(self, obj):
        #change specimen
        self=self+obj
        return self
    #vector*vector or number*number
    def __mul__(self, p):
        #checking type of the argument
        if type(p)==Vector:
            res = self.x * p.x + self.y * p.y + self.z * p.z
            return res
        else:
            self.x*=p
            self.y *= p
            self.z *= p
            return self
    #number*vector
    def __rmul__(self, p):
        #result
        return self*p
    # - before vector
    def __neg__(self):
        #result
        return Vector(-self.x, -self.y, -self.z)
    #difference - of vectors
    def __sub__(self, obj):
        return -obj+self
    #difference with...
    def __isub__(self, obj):
        #changinh object
        self = -obj+self
        return self
    #module of the vectoe
    def __abs__(self):
        return sqrt(self*self)
    #dividing nimber on number
    def __truediv__(self, p):
        return self*(1/p)
    #equality of vectors
    def __eq__(self, obj):
        #if equal values  of the fields
        if self.x==obj.x and self.y==obj.y and self.z==obj.z:
            return True
        else:
            return False
     #if vectors are not equal
    def __ne__(self, obj):
        return not self ==obj
    #if one vector less then other
    def __lt__(self, obj):
        #if module of one vector less than other
        if abs(self) <abs(obj):
            return True
        else:
            return False
    #If one vector more than other
    def __gt__(self, obj):
        if abs(self) >abs(obj):
            return True
        else:
            return False
    #If one vector no more than other
    def __le__(self, obj):
        if abs(self) <= abs(obj):
            return True
        else:
            return False
    #If one vector no less than other
    def __ge__(self, obj):
        if abs(self) >= abs(obj):
            return True
        else:
            return False
    # bytes inversion
    def __invert__(self):
        self.x = 10-self.x
        self.y  =10-self.y
        self.z = 10-self.z
        return self
    #left (specimen  -first operand)
    def __lshift__(self,n):
        for i in range(n):
            self.x, self.y, self.z = self.y, self.z, self.x
            return self
    #left(specimen  -second operand)
    def __rlshift__(self,n):
        return self>>n
    #right (specimen - first operand)
    def __rshift(self,n):
        for i in range(n):
            self.x, self.y, self.z = self.z, self.x, self.y
            return self
    #right(specimen - sexond operand)
    def __rrshift__(self,n):
        return self<<n
#Vectors
print ("Vectors: ")
a=Vector(1,2,-1)
b=Vector(1,-1,-3)
c= Vector(9,8,11)
print ("a= ", a)
print ("b= ", b)
print ("c= ", c)
#module
print ("the module of vectors are: ")
print ("|a| = :", abs(a) )
print ("|b| = :", abs(b) )
print ("|c| = :", abs(c) )
#Comparison of vectors
print ("The Comparison of vectors")
print ("a==b  ->", a==b)
print ("a!=b  ->", a!=b)
print ("a==c  ->", a==c)
print ("a<b  ->", a<b)
print ("a>b  ->", a>b)
print ("a<=c  ->", a<=c)
print ("a>=c  ->", a>=c)
#operations with vectors
print (" The Sum of vectors:")
print ("a+b= ", a+b)
c+=a
print ("c+=a ->", c)
print ("The difference of  vectors")
print ("a-b= ", a-b)
c-=a
print ("c-=a ->", c)
print ("Product of vectors")
print ("a*b= ", a*b)
print ("Multiplication and division of a vector by a number")
print ("a*3", a*3)
print ("a= ", a)
print ("2*b=", 2*b)
print ("b= ", b)
print ("-b=", -b)
print ("b= ", b)
print ("a/3= ", a/3)
print ("a= ", a)
print ("Cyclical permutations")
v=Vector(1,2,3)
print ("v=", v)
print ("v<<1 =", v<<1)
print ("v>>1 =", v>>1)
print ("2>>v =", 2>>v)
print ("2<<v =", 2<<v)


